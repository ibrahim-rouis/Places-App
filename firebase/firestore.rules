rules_version = '2';

service cloud.firestore {

  function isLoggedIn(request) {
    return request.auth != null;
  }

  match /databases/{database}/documents {
    match /places/{placeID} {
      allow read: if isLoggedIn(request);
      allow create: if isLoggedIn(request) &&
                    request.resource.data.keys().hasOnly(["title", "description", "location", "createdBy", "createdAt", "updatedAt"]) &&
                    request.resource.data.createdBy == request.auth.uid;
      allow update: if isLoggedIn(request) &&
                    resource.data.createdBy == request.auth.uid &&
                    request.resource.data.keys().hasAny(["images", "description", "title", "updatedAt"]);
      allow delete: if false;
    }

    match /places/{placeID}/ratings/{userID} {
      allow read: if request.auth.uid == userID;
      allow write: if request.auth.uid == userID &&
                    request.resource.data.keys().hasOnly(["rating"]) &&
                    request.resource.data.rating > 0 &&
                    request.resource.data.rating <= 5;
    }

    match /places/{placeID}/views/{userID} {
      allow read: if request.auth.uid == userID;
      allow write: if request.auth.uid == userID &&
                    request.resource.data.keys().hasOnly(["timestamp"]);
      allow delete: if false;
    }

    match /favorites/{userID} {
      allow read: if request.auth.uid == userID;
      allow write: if request.auth.uid == userID &&
                    request.resource.data.keys().hasOnly(["favorites"]);
      allow delete: if false;
    }
  }
}